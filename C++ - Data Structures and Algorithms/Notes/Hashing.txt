Hashing summary:
"In summary, a properly tuned hashing system will return records with an average cost of less than two record accesses. This makes it the most effective way known to store a database of records to support exact-match queries. Unfortunately, hashing is not effective when implementing range queries, or answering questions like "Which record in the collection has the smallest key value?""

10.3.2 Binning
Example range 0 to 999, tablesize = 10. x / 100
This gives 0-99 will go to slot 0 and 100-199 will go to slot 1.
In general you store record with key value i at position i/X (integer division).

10.5 Bucket Hashing
Bucket Hashing is one implementation for closed hashing.
Table is grouped into buckets. One bucket has several cells. If a bucket is full, it will be stored in the overflow bucket.
Always insert values top most of a bucket.
Searching:
• Find what bucket to search with hash function.
• If key value is not found in the bucket and still has free slots, search is complete (key value does not exist).
• If the bucket is full, you look in the overflow bucket for the key value.

Alternative bucket hashing:
• Insert values on slot number instead of bucket number.
• If slot is occupied look for next empty cell in that bucket.

Bucket Hashing is good when searching a disk since the bucket size can be set to the size of a disk block.

10.6 Collision Resolution
Closed hashing with no bucketing is the most commonly used form of hashing. Without bucketing you can use any slot in the hash table (that is not occupied).
• Probe Sequence: Sequence to find unoccupied slot, generated by the probe function.
• Probe Function (p): The function to decide where to look next in table if slot is occupied.
Collision resolutions:
Definition: Cells h0(x), h1(x), h2(x),... are tried in succession until empty cell is found where hi(x) = "(hash(x) + p(i)) mod TableSize", p(0) = 0.
• Linear Probing, p(i) = i
(• Primary clustering: Tendency of linear probing creating a lot of clustering making the probability of values going into slots unevenly distributed.)

• Quadratic Probing, p(i) = i^2
A problem is that quadratic probing will not reach all slots, thus sometimes it's impossible to insert.
Though:
• If TableSize is a prime number and the probe function is p(i) = i^2, at least half of the slots will be reachable
• If the TableSize is a power of 2 (M = 2^x) and the probe function is p(i)=(i^2 + i)/2, the every slot in the table will be reachable.

• Double Hashing, p(i) = primtal - (x mod primtal)
p(K,i) = i*h2(K), h2(K) != 0 (to avoid not making progress in probe sequence)
Good way: 
• TableSize (M) is a prime number.
• h2 should return a value 1 <= h2(k) <= M - 1.
• h2(k) = 1 + (k mod (M-1)).

• Pseudo-random Probing: Generate TableSize (M) random numbers. Use random number as c in p(i) = ci until empty slot is found.

10.8 Analysis of Closed Hashing
• Load factor: Number of elements / TableSize (N/M)
"However, the additional search cost caused by each additional insertion increases rapidly once the table becomes half full. Based on this analysis, the rule of thumb is to design a hashing system so that the hash table never gets above about half full, because beyond that point performance will degrade rapidly. This requires that the implementor have some idea of how many records are likely to be in the table at maximum loading, and select the table size accordingly. The goal should be to make the table small enough so that it does not waste a lot of space on the one hand, while making it big enough to keep performance good on the other."

10.9 Deletion

